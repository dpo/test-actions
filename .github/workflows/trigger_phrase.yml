name: Trigger Phrase Workflow
on:
  pull_request:
  issue_comment:
    types: [created]
  workflow_dispatch:

jobs:
  do_something:
    name: Task
    runs-on: ubuntu-latest
    if: ${{ github.event.comment &&
            github.event.issue.pull_request &&
            startsWith(github.event.comment.body, '/triggerjob') }}
    steps:
      - name: rocket
        run: |
          # send reaction to comment to show build was triggered
          curl ${{github.event.comment.url}}/reactions \
            -X POST \
            -d '{"content":"rocket"}' \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ github.token }}"
      - name: get arguments
        id: get-args
        run: |
          args=$(echo ${{github.event.comment.body}} | awk '{for (i=2; i<NF; i++) printf $i " "; printf $NF}')
          echo "::set-output name=args::$args"
      - uses: actions/checkout@v3
      - name: create artifacts
        run: |
          echo "${{ steps.get-args.outputs.args }}"
          mkdir artifact_dir
          echo "BLA" > artifact_dir/artifact1.txt
          echo "${{ steps.get-args.outputs.args }}" > artifact_dir/artifact2.txt
      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: secret_message
          path: artifact_dir
      - name: Add Comment to Pull Request
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: ':chart_with_upwards_trend: The artifacts are ready!'
            })
      - name: Build Gist JSON
        id: gistjson
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            function grabFiles(dirName) {
              var gist_files = {}
              await fs.readdir(dirName, (err, files) => {
                if (!err)
                  files.forEach(file => {
                    fs.lstat(file, (err, stats) => {
                      if (!err)
                        if (stats.isFile())
                          gist_files[file] = fs.readFileSync(file, "utf8").toString();
                          console.log(file);
                    });
                  });
              });
              return gist_files;
            }
            const gist_files = await grabFiles('artifact_dir');
            return gist_files;
      - name: Update Gist
        run: |
          curl \
            -X PATCH \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ github.token }}" \
            https://api.github.com/gists/${{ secrets.GIST_ID }} \
            -d '"description": "${{ github.repo }} Artifacts", "files": ${{ steps.gistjson.outputs.result }}'
